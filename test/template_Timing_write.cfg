process Test = {
    
    untracked PSet maxEvents = {untracked int32 input = 1}
    source = EmptySource {
	untracked uint32 firstRun = 1 
	untracked uint32 numberEventsInRun = 1
    }
    
    service = MessageLogger {
	untracked vstring destinations = { "insert_workdir/insert_logfile" }
	untracked PSet insert_logfile = { untracked string threshold = "INFO" }
    }
    
    service = Timing {}
    #       service = SimpleProfiling {}
    
    service = PoolDBOutputService{
	string connect = "sqlite_file:insert_dbfile"    
	#
	untracked string timetype = "runnumber"    
	#blob	    untracked string BlobStreamerName="TBufferBlobStreamingService"
	PSet DBParameters = {
	    untracked string authenticationPath="/afs/cern.ch/cms/DB/conddb"
	    untracked int32 messageLevel=2
	}
	
#badstrip      VPSet toPut={ { string record = "SiStripBadStripRcd"  string tag ="mytest_bs"} }    
#modulehv      VPSet toPut={ { string record = "SiStripModuleHVRcd"  string tag ="mytest_hv"} }    
#gain          VPSet toPut={ { string record = "SiStripApvGainRcd"   string tag ="mytest_g"} }    
#ped           VPSet toPut={ { string record = "SiStripPedestalsRcd" string tag ="mytest_p"} }    
#noise         VPSet toPut={ { string record = "SiStripNoisesRcd"    string tag ="mytest_n"} }
    }
        

#badstrip         module prod =  SiStripBadStripBuilder {
#modulehv         module prod =  SiStripModuleHVBuilder {
#gain             module prod =  SiStripApvGainBuilder {
#ped              module prod =  SiStripPedestalsBuilder {
#noise            module prod =  SiStripNoisesBuilder {
#debug                  untracked uint32 printDebug = 6
               }

       service = SimpleMemoryCheck {
           untracked int32 ignoreTotal = 0 # default is one
        }

       include "PerfTools/Callgrind/data/callgrindSwitch.cfi"

       untracked PSet options   = { untracked bool wantSummary = true }

       path p = {
                 profilerStart,
                 prod,
                 profilerStop
                }


       module print = AsciiOutputModule {}
       endpath ep = { print }
}
